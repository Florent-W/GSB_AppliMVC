<?php
/**
 * Test de la classe d'accès aux données.
 *
 *
 * PHP Version 5
 *
 * @category  PPE
 * @package   GSB
 * @author    Florent WELTMANN <florent.weltmann@gmail.com>
 */
require_once '..\includes\class.pdogsb.inc.php';

// Les tests sur cette classe ne marchent que pour la bdd fournies car si les données changent, le résultat des assert vont changés aussi créant des incohérences
/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-03-17 at 17:02:56.
 */
class PdoGsbTest extends PHPUnit_Framework_TestCase
{

    /**
     *
     * @var PdoGsb
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PdoGsb();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    /**
     * @covers PdoGsb::getNbjustificatifs
     */
    public function testGetNbjustificatifs()
    {
        $this->assertGreaterThanOrEqual(0, $this->object->getNbjustificatifs(1, 201202));
    }

    /**
     * Generated from @assert (-1, 2015) == NULL.
     *
     * @covers PdoGsb::getNbjustificatifs
     */
    public function testGetNbjustificatifs2()
    {
        $this->assertEquals(NULL, $this->object->getNbjustificatifs(- 1, 2015));
    }

    /**
     * @covers PdoGsb::getInfosVisiteur
     */
    public function testGetInfosVisiteur()
    {
        $this->assertEquals(array(
            'id' => 'a55',
            0 => 'a55',
            'nom' => 'Bedos',
            1 => 'Bedos',
            'prenom' => 'Christian',
            2 => 'Christian',
            'type' => NULL,
            3 => NULL
        ), $this->object->getInfosVisiteur('cbedos', '4fa7404d3b67098a5510cb8fc4a9221b083138e02539a240e382eb1719d062a7'));
    }

    public function testGetInfosVisiteur2()
    {
        $this->assertNotEquals(array(
            'id' => 'a17',
            0 => 'a17',
            'nom' => 'Andre',
            1 => 'Andre',
            'prenom' => 'David',
            2 => 'David',
            'type' => 'Visiteur',
            3 => 'Visiteur'
        ), $this->object->getInfosVisiteur('dandre', 'oppg5'));
    }

    public function testGetInfosVisiteur3()
    {
        $this->assertEquals(array(
            'id' => 'a17',
            0 => 'a17',
            'nom' => 'Andre',
            1 => 'Andre',
            'prenom' => 'David',
            2 => 'David',
            'type' => 'Visiteur',
            3 => 'Visiteur'
        ), $this->object->getInfosVisiteur('dandre', '5cca50f7c552eea7e2b5d0515e41ac64188bb745171ebe0b1b80805768c7e4c8'));
    }

    /**
     * @covers PdoGsb::getIdVisiteurs
     *
     * @todo Implement testGetIdVisiteurs().
     */
    public function testGetIdVisiteurs()
    {
        $this->assertInternalType("array", $this->object->getIdVisiteurs());
    }

    /**
     * @covers PdoGsb::getLesFraisForfait
     */
    public function testGetLesFraisForfait()
    {
        $this->assertInternalType("array", $this->object->getLesFraisForfait('b19', '201707'));
    }

    /**
     * @covers PdoGsb::getLesIdFrais
     */
    public function testGetLesIdFrais()
    {
        $this->assertInternalType("array", $this->object->getLesIdFrais());
    }

    /**
     * @covers PdoGsb::estPremierFraisMois
     */
    public function testEstPremierFraisMois()
    {
        $this->assertEquals(true, $this->object->estPremierFraisMois('a131', '201803'));
    }

    public function testEstPremierFraisMois2()
    {
        $this->assertEquals(false, $this->object->estPremierFraisMois('a17', '201612'));
    }

    /**
     * @covers PdoGsb::dernierMoisSaisi
     */
    public function testDernierMoisSaisi()
    {
        $this->assertEquals('201802', $this->object->dernierMoisSaisi('a131'));
    }

    public function testDernierMoisSaisi3()
    {
        $this->assertNotEquals('201805', $this->object->dernierMoisSaisi('a17'));
    }

    /**
     * @covers PdoGsb::creeNouvellesLignesFrais
     *
     * @todo Implement testCreeNouvellesLignesFrais().
     */
    public function testCreeNouvellesLignesFrais()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::creeNouveauFraisHorsForfait
     *
     * @todo Implement testCreeNouveauFraisHorsForfait().
     */
    public function testCreeNouveauFraisHorsForfait()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::supprimerFraisHorsForfait
     *
     * @todo Implement testSupprimerFraisHorsForfait().
     */
    public function testSupprimerFraisHorsForfait()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::getLesMoisDisponibles
     *
     * @todo Implement testGetLesMoisDisponibles().
     */
    public function testGetLesMoisDisponibles()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::getLesMoisDisponiblesFichesValides
     *
     * @todo Implement testGetLesMoisDisponiblesFichesValides().
     */
    public function testGetLesMoisDisponiblesFichesValides()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::getMoisDisponibleFicheValide
     *
     * @todo Implement testGetMoisDisponibleFicheValide().
     */
    public function testGetMoisDisponibleFicheValide()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::getLesInfosFicheFrais
     *
     * @todo Implement testGetLesInfosFicheFrais().
     */
    public function testGetLesInfosFicheFrais()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::majEtatFicheFrais
     *
     * @todo Implement testMajEtatFicheFrais().
     */
    public function testMajEtatFicheFrais()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers PdoGsb::recuperationMotDePasse
     */
    public function testRecuperationMotDePasse()
    {
        $this->assertEquals('7a0126dafd3f7ffdd3232fa21cd27616315b849087efedf3f4c16bac654724ba', $this->object->recuperationMotDePasse('a131'));
    }

    public function testRecuperationMotDePasse2()
    {
        $this->assertNotEquals('oppg5', $this->object->recuperationMotDePasse('a17'));
    }

    /**
     * @covers PdoGsb::getIdVisiteur
     *
     * @todo Implement testGetIdVisiteur().
     */
    public function testGetIdVisiteur()
    {
        $this->assertEquals('c14', $this->object->getIdVisiteur('fdaburon'));
    }

    public function testGetIdVisiteur2()
    {
        $this->assertInternalType('string', $this->object->getIdVisiteur('cclepkens'));
    }

    public function testGetIdVisiteur3()
    {
        $this->assertNotEquals('c14', $this->object->getIdVisiteur('bcacheux'));
    }

    /**
     * @covers PdoGsb::getVisiteur
     *
     * @todo Implement testGetVisiteur().
     */
    public function testGetVisiteur()
    {
        // Remove the following lines when you implement this test.
        // $this->assertEquals(array('a131'), $this->object->getVisiteur('lvillachane'));
    }

    /**
     * @covers PdoGsb::getVisiteurMin
     */
    public function testGetVisiteurMin()
    {
        $this->assertEquals(array(
            'nom' => 'Villechalane',
            0 => 'Villechalane',
            'prenom' => 'Louis',
            1 => 'Louis',
            'id' => 'a131',
            2 => 'a131'
        ), $this->object->getVisiteurMin());
    }

    public function testGetVisiteurMin2()
    {
        $this->assertNotEquals(array(
            'nom' => 'Villechalane',
            0 => 'Villechalane',
            'prenom' => 'Louis',
            1 => 'Louis',
            'id' => 'a1',
            2 => 'a131'
        ), $this->object->getVisiteurMin());
    }

    public function testGetVisiteurMin3()
    {
        $this->assertNotEquals(array(
            'nom' => 'Andre',
            0 => 'Andre',
            'prenom' => 'David',
            1 => 'David',
            'id' => 'a17',
            2 => 'a17'
        ), $this->object->getVisiteurMin());
    }

    public function testGetVisiteurSelection()
    {
        $this->assertEquals(array(
            'nom' => 'Andre',
            0 => 'Andre',
            'prenom' => 'David',
            1 => 'David'
        ), $this->object->getVisiteurSelection('a17'));
    }

    public function testGetVisiteurSelection2()
    {
        $this->assertNotEquals(array(
            'nom' => 'Andre',
            0 => 'Andre',
            'prenom' => 'David',
            1 => 'David'
        ), $this->object->getVisiteurSelection('a131'));
    }

    public function testGetVisiteurSelection3()
    {
        $this->assertNotEquals(array(
            'nom' => 'Andre',
            0 => 'Andre',
            'prenom' => 'David',
            1 => 'David'
        ), $this->object->getVisiteurSelection('a9'));
    }
}

