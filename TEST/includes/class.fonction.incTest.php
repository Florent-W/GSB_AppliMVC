<?php
/**
 * Tests des fonctions de l'application GSB
 *
 * PHP Version 5
 *
 * @category  PPE
 * @package   GSB
 * @author    Florent WELTMANN <florent.weltmann@gmail.com>
 */
require_once '..\includes\class.fonction.inc.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-03-18 at 01:20:16.
 */
class fonctionTest extends PHPUnit_Framework_TestCase
{

    /**
     *
     * @var fonction
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new fonction();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {}

    /**
     * Generated from @assert (12/02/2008) == 2008-02-12.
     *
     * @covers fonction::dateFrancaisVersAnglais
     */
    public function testDateFrancaisVersAnglais()
    {
        $this->assertEquals('2008-02-12', $this->object->dateFrancaisVersAnglais('12/02/2008'));
    }

    /**
     * Generated from @assert (02/01/1923) != 2002-01-199.
     *
     * @covers fonction::dateFrancaisVersAnglais
     */
    public function testDateFrancaisVersAnglais2()
    {
        $this->assertNotEquals(2002 - 01 - 199, $this->object->dateFrancaisVersAnglais(02 / 01 / 1923));
    }

    /**
     * Generated from @assert (2008-02-12) == 12/02/2008.
     *
     * @covers fonction::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais()
    {
        $this->assertEquals('12/02/2008', $this->object->dateAnglaisVersFrancais('2008-02-12'));
    }

    /**
     * Generated from @assert (1998-03-02) == 02/03/1998.
     *
     * @covers fonction::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais2()
    {
        $this->assertEquals('02/03/1998', $this->object->dateAnglaisVersFrancais('1998-03-02'));
    }

    /**
     * Generated from @assert (1992-03-02) != 02/03/1998.
     *
     * @covers fonction::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais3()
    {
        $this->assertNotEquals('02/03/1998', $this->object->dateAnglaisVersFrancais('1992-03-02'));
    }

    /**
     * @covers fonction::estConnecte
     */
    public function testEstConnecte()
    {
        if (isset($_SESSION['idVisiteur'])) {
            $this->assertEquals(true, $this->object->estConnecte());
        } else {
            $this->assertEquals(false, $this->object->estConnecte());
        }
    }

    /**
     * @covers fonction::connecter
     *
     * @todo Implement testConnecter().
     */
    public function testConnecter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers fonction::deconnecter
     *
     * @todo Implement testDeconnecter().
     */
    public function testDeconnecter()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers fonction::getMois
     */
    public function testGetMois()
    {
        $this->assertEquals('201103', $this->object->getMois('20/03/2011'));
    }

    public function testGetMois2()
    {
        $this->assertNotEquals('032008', $this->object->getMois('20/03/2008'));
    }

    /**
     * @covers fonction::estEntierPositif
     */
    public function testEstEntierPositif()
    {
        $this->assertEquals(true, $this->object->estEntierPositif(12));
    }

    public function testEstEntierPositif2()
    {
        $this->assertEquals(false, $this->object->estEntierPositif(- 8));
    }

    /**
     * @covers fonction::estTableauEntiers
     */
    public function testEstTableauEntiers()
    {
        $this->assertEquals(true, $this->object->estTableauEntiers(array(
            2,
            3
        )));
    }

    public function testEstTableauEntiers2()
    {
        $this->assertEquals(false, $this->object->estTableauEntiers(array(
            2,
            - 3
        )));
    }

    public function testEstTableauEntiers3()
    {
        $this->assertEquals(true, $this->object->estTableauEntiers(array(
            2,
            3,
            25,
            0,
            2
        )));
    }

    /**
     * @covers fonction::estDateDepassee
     */
    public function testEstDateDepassee()
    {
        $this->assertEquals(true, $this->object->estDateDepassee('21/02/2017'));
    }

    public function testEstDateDepassee2()
    {
        $this->assertEquals(false, $this->object->estDateDepassee('21/02/2018')); // test ne fonctionnera plus Ã  partir du 21/02/2019
        
    }

    /**
     * @covers fonction::estDateValide
     */
    public function testEstDateValide()
    {
        $this->assertEquals(true, $this->object->estDateValide('21/02/2017'));
    }

    public function testEstDateValide2()
    {
        $this->assertEquals(false, $this->object->estDateValide('2017-02-21'));
    }

    public function testEstDateValide3()
    {
        $this->assertEquals(false, $this->object->estDateValide('2017/02'));
    }

    /**
     * @covers fonction::getMoisSuivant
     */
    public function testGetMoisSuivant()
    {
        $this->assertEquals('2017-03-20', $this->object->getMoisSuivant('2017-02-20'));
    }

    public function testGetMoisSuivant2()
    {
        $this->assertNotEquals('2017-03-20', $this->object->getMoisSuivant('20/02/2017'));
    }

    public function testGetMoisSuivant3()
    {
        $this->assertEquals('2018-01-20', $this->object->getMoisSuivant('2017-12-20'));
    }

    /**
     * @covers fonction::lesQteFraisValides
     */
    public function testLesQteFraisValides()
    {
        $this->assertEquals(true, $this->object->lesQteFraisValides(array(
            20,
            2
        )));
    }

    public function testLesQteFraisValides2()
    {
        $this->assertEquals(false, $this->object->lesQteFraisValides(array(
            20,
            "trois"
        )));
    }

    public function testLesQteFraisValides3()
    {
        $this->assertEquals(false, $this->object->lesQteFraisValides(array(
            20,
            2,
            120,
            3,
            "5 euros"
        )));
    }

    /**
     * @covers fonction::ajouterErreur
     *
     * @todo Implement testAjouterErreur().
     */
    public function testAjouterErreur()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers fonction::nbErreurs
     */
    public function testNbErreurs()
    {
        $this->assertGreaterThanOrEqual(0, $this->object->nbErreurs());
    }

    public function testNbErreurs2()
    {
        $this->assertNotEquals(- 1, $this->object->nbErreurs());
    }
}
